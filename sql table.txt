1. Receipts Management

-- Enable UUID extension
create extension if not exists "uuid-ossp" with schema extensions;

-- Create receipts table
create table public.receipts (
  id uuid not null default uuid_generate_v4(),
  user_id uuid not null,
  store_name text not null,
  total_amount numeric(10, 2) not null,
  date timestamptz not null default now(),
  items jsonb not null default '[]'::jsonb,
  image_url text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  
  
  constraint receipts_pkey primary key (id)
) tablespace pg_default;

-- Create indexes for better query performance
create index if not exists receipts_user_id_idx on public.receipts (user_id);
create index if not exists receipts_date_idx on public.receipts (date);


-- Enable Row Level Security
alter table public.receipts enable row level security;

-- Create policies for secure data access
create policy "Users can view their own receipts"
  on public.receipts for select
  using (auth.uid() = user_id);

create policy "Users can insert their own receipts"
  on public.receipts for insert
  with check (auth.uid() = user_id);

create policy "Users can update their own receipts"
  on public.receipts for update
  using (auth.uid() = user_id);

create policy "Users can delete their own receipts"
  on public.receipts for delete
  using (auth.uid() = user_id);

-- Create a function to update the updated_at column
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- Create a trigger to automatically update the updated_at column
create or replace trigger handle_receipts_updated_at
  before update on public.receipts
  for each row execute function public.handle_updated_at();

-- Create a function to get the current user's receipts
create or replace function public.get_my_receipts()
returns setof public.receipts
language sql
security definer
set search_path = public
as $$
  select * from receipts where user_id = auth.uid() order by date desc;
$$;


2. User Management Table

-- Create users table to store additional user information
create table public.users (
  id uuid not null,
  email text not null,
  full_name text,
  avatar_url text,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  
  constraint users_pkey primary key (id),
  constraint users_id_fkey foreign key (id) references auth.users (id) on delete cascade,
  constraint users_email_key unique (email)
) tablespace pg_default;


-- Enable Row Level Security
alter table public.users enable row level security;

-- Create policies for secure data access
create policy "Users can view their own profile"
  on public.users for select
  using (auth.uid() = id);

create policy "Users can update their own profile"
  on public.users for update
  using (auth.uid() = id);

-- Create a function to handle new user signups
create or replace function public.handle_new_user()
returns trigger as $$
begin
  insert into public.users (id, email, full_name)
  values (new.id, new.email, new.raw_user_meta_data->>'full_name');
  return new;
end;
$$ language plpgsql security definer;

-- Create a trigger to handle new user signups
create or replace trigger on_auth_user_created
  after insert on auth.users
  for each row execute function public.handle_new_user();

-- Create a function to get the current user's profile
create or replace function public.get_my_profile()
returns json
language sql
security definer
set search_path = public
as $$
  select json_build_object(
    'id', id,
    'email', email,
    'full_name', full_name,
    'avatar_url', avatar_url,
    'currency', currency,
    'created_at', created_at,
    'updated_at', updated_at
  ) from users where id = auth.uid();
$$;


3. Receipt Image Storage

SELECT * FROM storage.buckets WHERE id = 'receipts';


4.Receipt Image Access Policies

-- First, remove existing policies if they exist
DROP POLICY IF EXISTS "Users can view their own receipt images" ON storage.objects;
DROP POLICY IF EXISTS "Users can upload receipt images" ON storage.objects;
DROP POLICY IF EXISTS "Users can update their own receipt images" ON storage.objects;
DROP POLICY IF EXISTS "Users can delete their own receipt images" ON storage.objects;

-- Then create new policies
CREATE POLICY "Users can view their own receipt images"
ON storage.objects FOR SELECT
TO authenticated
USING (bucket_id = 'receipts' AND auth.uid()::text = (storage.foldername(name))[1]);

CREATE POLICY "Users can upload receipt images"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (bucket_id = 'receipts' AND auth.uid()::text = (storage.foldername(name))[1]);

CREATE POLICY "Users can update their own receipt images"
ON storage.objects FOR UPDATE
TO authenticated
USING (bucket_id = 'receipts' AND auth.uid()::text = (storage.foldername(name))[1]);

CREATE POLICY "Users can delete their own receipt images"
ON storage.objects FOR DELETE
TO authenticated
USING (bucket_id = 'receipts' AND auth.uid()::text = (storage.foldername(name))[1]);

5. Row Level Security Policies for Users

-- Enable Row Level Security on users table if not already enabled
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Users can view their own profiles" ON public.users;
DROP POLICY IF EXISTS "Users can update their own profiles" ON public.users;
DROP POLICY IF EXISTS "Allow insert for authenticated users" ON public.users;

-- Create new policies
CREATE POLICY "Users can view their own profiles"
  ON public.users FOR SELECT
  USING (auth.uid() = id);

CREATE POLICY "Users can update their own profiles"
  ON public.users FOR UPDATE
  USING (auth.uid() = id);

-- Allow users to create their own profile
CREATE POLICY "Allow insert for authenticated users"
  ON public.users FOR INSERT
  WITH CHECK (auth.uid() = id);


6. Update Receipts Table

-- Add new columns to receipts table
alter table public.receipts 
  add column if not exists subtotal numeric(10, 2),
  add column if not exists tax_amount numeric(10, 2) default 0,
  add column if not exists discount_amount numeric(10, 2) default 0;

-- Backfill existing receipts with default values
-- For existing records, set subtotal = total_amount as a best guess
update public.receipts 
set 
  subtotal = total_amount,
  tax_amount = 0,
  discount_amount = 0
where subtotal is null;


7. Add currency column and update policy

-- Add currency column to the existing users table
ALTER TABLE public.users 
ADD COLUMN IF NOT EXISTS currency TEXT NOT NULL DEFAULT '₦';

-- Update the handle_new_user function
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.users (id, email, full_name, currency)
  VALUES (new.id, new.email, new.raw_user_meta_data->>'full_name', '₦');
  RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

8. Add user contact information to receipts

ALTER TABLE public.users
ADD COLUMN IF NOT EXISTS phone TEXT,
ADD COLUMN IF NOT EXISTS country_code VARCHAR(10);

9. Add Unique Username to Profiles

alter table public.users
add column username text unique;
